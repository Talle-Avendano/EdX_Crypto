This is a Crypto Project from EdX.

This Project contains methods for encrypting and decrypting texts.

A. Normalize Text
The first thing we will do is normalize our input message so that it’s easier to work with.

Write a method called normalizeText() which does the following:

1. Removes all the spaces from your text
2. Remove any punctuation (. , : ; ’ ” ! ? ( ) )
3. Turn all lower-case letters into upper-case letters
4. Return the result.


B. Ceasar Cipher
Write a method called caesarify that takes two parameters. The first argument is a string
you want to encrypt, and the second is an integer that contains the shift value or "key".
The function should return a string, which is the input string encrypted with the Caesar
cypher using the shift value passed in its second argument. You may assume that the input string is normalized.

C. ShiftAlphabet Method (provided)
Takes one String argument
public static String shiftAlphabet(int shift) {
    int start = 0;
    if (shift < 0) {
        start = (int) 'Z' + shift + 1;
    } else {
        start = 'A' + shift;
    }
    String result = "";
    char currChar = (char) start;
    for(; currChar <= 'Z'; ++currChar) {
        result = result + currChar;
    }
    if(result.length() < 26) {
        for(currChar = 'A'; result.length() < 26; ++currChar) {
            result = result + currChar;
        }
    }
    return result;
}


D. Codegroups
Write a method called groupify which takes two parameters.
The first parameter is the string that you want to break into groups.
The second argument is the number of letters per group. The function will return a string, which
consists of the input string broken into groups with the number of letters specified by the second argument.
If there aren’t enough letters in the input string to fill out all the groups, you should “pad” the final
group with x’s. So groupify(“HITHERE”, 2) would return “HI TH ER Ex”.

1. You may assume that the input string is normalized.
2. Note that we use lower-case ‘x’ here because it is not a member of the (upper-case) alphabet we’re working with.
If we used upper-case ‘X’ here we would not be able to distinguish between an X that was part of the code and a
padding X.



E. Putting it all together
   Write a function called encryptString which takes three parameters: a string to be encrypted, an integer shift value, and a code group size. Your method should return a string which is its cyphertext equivalent. Your function should do the following:

   1. Call normalizeText on the input string.
   2. Call obify to obfuscate the normalized text.
   3. Call caesarify to encrypt the obfuscated text.
   4. Call groupify to break the cyphertext into groups of size letters.
   5. Return the result


F. Hacker Problem - Decrypt
   This part is not required for course credit.

   Write a method called ungroupify which takes one parameter, a string containing space-separated groups, and returns the string without any spaces. So if you call ungroupify(“THI SIS ARE ALL YGR EAT SEN TEN CEx”) you will return “THISISAREALLYGREATSENTENCE”

   Now write a function called decryptString which takes three parameters: a string to be decrypted and the integer shift value used to encrypt the string, and returns a string which contains the (normalized) plaintext. You can assume the string was encrypted by a call to encryptString().

   So if you were to call

   String cyphertext = encryptString(“Who will win the election?”,  5, 3);
   String plaintext = decryptString(cyphertext, 5)